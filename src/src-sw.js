/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import {
  precacheAndRoute,
  createHandlerBoundToURL,
  matchPrecache,
} from 'workbox-precaching';
import {
  registerRoute,
  NavigationRoute,
  setCatchHandler,
} from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

clientsClaim();

/**
 * We are not wrapping it in a 'message' event as per the new update.
 * @see https://developers.google.com/web/tools/workbox/modules/workbox-core
 */
self.skipWaiting();

/**
 * Precache all of the assets generated by your build process.
 * Their URLs are injected into the manifest variable below.
 * This variable must be present somewhere in your service worker file,
 * even if you decide not to use precaching. See https://cra.link/PWA
 */
precacheAndRoute(self.__WB_MANIFEST);

// This assumes /app-shell.html has been precached.

const handler = createHandlerBoundToURL('/index.html');
const navigationRoute = new NavigationRoute(handler);
registerRoute(navigationRoute);

//registerRoute(  'http://localhost:8000/todos',  workbox.strategies.networkFirst())

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy.
// @see https://developers.google.com/web/tools/workbox/guides/common-recipes#google_fonts
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
  })
);

registerRoute(
  ({ url }) =>
    url.origin ===
    'https://api.mapbox.com/styles/v1/ivanrt/ckdk80nes0wb01iqminlchno4?access_token=pk.eyJ1IjoiaXZhbnJ0IiwiYSI6ImNrZGlwN3B6ejA3M3QycnAzZHR4NWxnMXIifQ.wXvdCl_qPQ55hb8Bgkeb5A',
  new StaleWhileRevalidate({
    cacheName: 'mapbox-api-cache',
  })
);

registerRoute(
  ({ url }) =>
    url.origin ===
    'https://events.mapbox.com/events/v2?access_token=pk.eyJ1IjoiaXZhbnJ0IiwiYSI6ImNrZGlwN3B6ejA3M3QycnAzZHR4NWxnMXIifQ.wXvdCl_qPQ55hb8Bgkeb5A',
  new StaleWhileRevalidate({
    cacheName: 'mapbox-event-cache',
  })
);

// Cache the underlying font files with a cache-first strategy for 1 year.
// @see https://developers.google.com/web/tools/workbox/guides/common-recipes#google_fonts
registerRoute(
  ({ url }) =>
    url.origin ===
    `https://events.mapbox.com/events/v2?access_token=${process.env.mapboxToken}`,
  new CacheFirst({
    cacheName: 'map-box-utility-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365,
        maxEntries: 30,
      }),
    ],
  })
);

// Cache the underlying font files with a cache-first strategy for 1 year.
// @see https://developers.google.com/web/tools/workbox/guides/common-recipes#google_fonts
registerRoute(
  ({ url }) =>
    url.origin ===
    `https://api.mapbox.com/styles/v1/ivanrt/ckdk80nes0wb01iqminlchno4?access_token=${process.env.mapboxToken}`,
  new CacheFirst({
    cacheName: 'map-box-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365,
        maxEntries: 30,
      }),
    ],
  })
);

// Cache the underlying font files with a cache-first strategy for 1 year.
// @see https://developers.google.com/web/tools/workbox/guides/common-recipes#google_fonts
registerRoute(
  ({ url }) =>
    url.origin ===
    `https://api.mapbox.com/styles/v1/ivanrt/ckdk80nes0wb01iqminlchno4?access_token=pk.eyJ1IjoiaXZhbnJ0IiwiYSI6ImNrZGlwN3B6ejA3M3QycnAzZHR4NWxnMXIifQ.wXvdCl_qPQ55hb8Bgkeb5A`,
  new CacheFirst({
    cacheName: 'map-box-cached-assets',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365,
        maxEntries: 30,
      }),
    ],
  })
);

/**
 * Countries list api.
 *
 * Caches at: runtime
 */
registerRoute(
  ({ url }) =>
    url.origin ===
      `${process.env.API_BASE_URL?.toString().substring(
        0,
        process.env.API_BASE_URL.length - 1
      )}` && url.pathname.startsWith('/api/locations/countries/'),

  new StaleWhileRevalidate({
    cacheName: 'countries-api',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({ maxEntries: 200 }), // Will cache maximum 1 requests.
    ],
  })
);

new RegExp('/styles/.*\\.css'),
  /**
   * Country Boundary api.
   *
   * Caches at: runtime
   */
  registerRoute(
    ({ url }) =>
      url.origin ===
        `${process.env.API_BASE_URL?.toString().substring(
          0,
          process.env.API_BASE_URL.length - 1
        )}` && url.pathname.startsWith('/api/locations/countries-boundary/'),

    new StaleWhileRevalidate({
      cacheName: 'country_boundary-api',
      plugins: [
        new CacheableResponsePlugin({
          statuses: [0, 200],
        }),
        new ExpirationPlugin({ maxEntries: 1 }), // Will cache maximum 1 requests.
      ],
    })
  );

/**
 * Global Statistics api.
 *
 * Caches at: runtime
 */
registerRoute(
  ({ url }) =>
    url.origin ===
      `${process.env.API_BASE_URL?.toString().substring(
        0,
        process.env.API_BASE_URL.length - 1
      )}` && url.pathname.startsWith('/api/statistics/global-stat/'),

  new StaleWhileRevalidate({
    cacheName: 'global-stat-api',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({ maxEntries: 1 }), // Will cache maximum 1 requests.
    ],
  })
);
/**
 * Random points api.
 *
 * Caches at: runtime
 */
registerRoute(
  ({ url }) =>
    url.origin ===
      `${process.env.API_BASE_URL?.toString().substring(
        0,
        process.env.API_BASE_URL.length - 1
      )}` && url.pathname.startsWith('/api/locations/schools/random/'),

  new StaleWhileRevalidate({
    cacheName: 'random-schools-api',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({ maxEntries: 1 }), // Will cache maximum 1 requests.
    ],
  })
);

/**
 * Random points api.
 *
 * Caches at: runtime
 */
registerRoute(
  ({ url }) =>
    url.origin ===
      `${process.env.API_BASE_URL?.toString().substring(
        0,
        process.env.API_BASE_URL.length - 1
      )}` && url.pathname.startsWith('/api/statistics/country/'),

  new StaleWhileRevalidate({
    cacheName: 'country-detail-api',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({ maxEntries: 200 }), // Will cache maximum 1 requests.
    ],
  })
);

/**
 * We use CacheFirst for images because, images are not going to change very often,
 * so it does not make sense to revalidate images on every request.
 *
 * @see https://developers.google.com/web/tools/workbox/guides/common-recipes#caching_images
 */
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// @see https://developers.google.com/web/tools/workbox/guides/common-recipes#cache_css_and_javascript_files
registerRoute(
  ({ request }) =>
    request.destination === 'script' || request.destination === 'style',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
  })
);
